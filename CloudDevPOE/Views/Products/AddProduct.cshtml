@model CloudDevPOE.Models.Tbl_Products
@{
	ViewData["Title"] = "Add Product";
	var userID = ViewData["userID"];
}
<head>
	<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
	<style>
		body {
			font-family: 'Arial', sans-serif;
			background-color: #fdf8f3;
			margin: 0;
			padding: 0;
			display: flex;
			justify-content: center;
			align-items: center;
			height: 100vh;
		}

		.container {
			background-color: #ffffff;
			border-radius: 10px;
			box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
			padding: 30px;
			width: 600px;
			max-width: 90%;
		}

		h1 {
			color: #333;
			text-align: center;
		}

		p {
			color: #666;
			text-align: center;
			margin-bottom: 10px;
		}

		.form-container {
			display: flex;
			flex-direction: column;
		}

			.form-container input,
			.form-container textarea,
			.form-container select {
				width: 100%;
				padding: 10px;
				margin-bottom: 10px;
				border: 1px solid #ccc;
				border-radius: 5px;
				font-size: 16px;
			}

			.form-container textarea {
				resize: vertical;
			}

		.image-upload-container {
			display: flex;
			flex-wrap: wrap;
			justify-content: center;
			padding: 10px;
			border: 2px dashed #ccc;
			border-radius: 10px;
			margin-bottom: 20px;
			background-color: #f9f9f9;
		}

		.image-box, .upload-box {
			position: relative;
			width: 150px;
			height: 150px;
			margin: 5px;
			display: flex;
			justify-content: center;
			align-items: center;
			border: 1px solid #ccc;
			border-radius: 5px;
			background-color: #fff;
			cursor: pointer;
		}

			.image-box img {
				max-width: 100%;
				max-height: 100%;
				border-radius: 5px;
			}

			.image-box .remove-image {
				position: absolute;
				top: -10px;
				right: -10px;
				background-color: #ff0000;
				border: none;
				border-radius: 50%;
				cursor: pointer;
				font-size: 24px;
				padding: 0;
				width: 30px;
				height: 30px;
				color: #fff;
				display: flex;
				justify-content: center;
				align-items: center;
			}

		.upload-box {
			font-size: 48px;
			color: #999;
		}

			.upload-box:hover {
				color: #555;
			}

		button {
			width: 100%;
			padding: 10px;
			background-color: #28a745;
			color: #fff;
			border: none;
			border-radius: 5px;
			font-size: 16px;
			cursor: pointer;
			transition: background-color 0.3s ease;
		}

			button:hover {
				background-color: #218838;
			}

		.modal-header {
			border-bottom: none;
		}

		.modal-body {
			display: flex;
			justify-content: center;
			align-items: center;
			max-height: 80vh;
		}

			.modal-body img {
				max-width: 100%;
				max-height: 100%;
			}
	</style>
</head>

<body>
	<div class="container">
		<h1>Add Product</h1>
		<p>Please fill in the details of the product you want to add.</p>

		<form id="product-form" action="AddProduct" method="post" enctype="multipart/form-data">
			<div class="form-container">
				<input type="text" id="product-name" name="ProductName" placeholder="Product Name" required>
				<select id="product-category" name="ProductCategory" required>
					<option value="" disabled selected>Select Category</option>
					<option value="Accessories">Accessories</option>
					<option value="Art & Decor">Art & Decor</option>
					<option value="Bags & Purses">Bags & Purses</option>
					<option value="Ceramics">Ceramics</option>
					<option value="Clothing & Apparel">Clothing & Apparel</option>
					<option value="Crafts & DIY">Crafts & DIY</option>
					<option value="Food & Beverages">Food & Beverages</option>
					<option value="Furniture">Furniture</option>
					<option value="Gifts & Keepsakes">Gifts & Keepsakes</option>
					<option value="Health & Beauty">Health & Beauty</option>
					<option value="Home & Living">Home & Living</option>
					<option value="Jewelry & Watches">Jewelry & Watches</option>
					<option value="Kids & Baby">Kids & Baby</option>
					<option value="Leather Goods">Leather Goods</option>
					<option value="Porcelain">Porcelain</option>
					<option value="Pottery">Pottery</option>
					<option value="Textiles & Fabrics">Textiles & Fabrics</option>
					<option value="Toys & Games">Toys & Games</option>
					<option value="Woodwork & Carving">Woodwork & Carving</option>
					<option value="Misc">Misc</option>
				</select>
				<textarea id="product-description" name="ProductDescription" placeholder="Product Description" required></textarea>
				<input type="number" id="product-price" name="ProductPrice" placeholder="Product Price" required>
				<input type="number" id="product-quantity" name="ProductQuantity" placeholder="Product Quantity" required>

				<div id="image-upload-container" class="image-upload-container">
					<input type="file" id="image-upload-input" class="image-upload-input" accept="image/*" style="display:none;" onchange="handleImageUpload(event)" />
					<div id="add-image-box" class="upload-box" onclick="document.getElementById('image-upload-input').click();">+</div>
				</div>

				<button type="submit">Submit</button>
			</div>
		</form>
	</div>

	<!-- Image cropping modal -->
	<div class="modal fade" id="crop-modal" tabindex="-1" role="dialog" aria-labelledby="cropModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-lg">
			<div class="modal-content">
				<div class="modal-header">
					<h4 class="modal-title" id="cropModalLabel">Edit Photo</h4>
				</div>
				<div class="modal-body">
					<img id="crop-image" src="" alt="Image for cropping" />
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
					<button type="button" id="crop-button" class="btn btn-primary">Crop</button>
				</div>
			</div>
		</div>
	</div>

	<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
	<script>
		let accumulatedFiles = [];
		let cropper = null;
		let currentFile = null;

		function handleImageUpload(event) {
			const files = event.target.files;
			if (files.length > 0) {
				currentFile = files[0];
				const reader = new FileReader();
				reader.onload = function (e) {
					const image = document.getElementById('crop-image');
					image.src = e.target.result;
					$('#crop-modal').modal('show');

					if (cropper !== null) {
						cropper.destroy();
					}

					setTimeout(() => {
						cropper = new Cropper(image, {
							aspectRatio: 4 / 5,
							viewMode: 2,
							dragMode: 'move',
							autoCropArea: 1,
							cropBoxResizable: true,
							resize: true,
							zoomable: true,
						});
					}, 200);

					document.getElementById('crop-button').removeEventListener('click', handleCropButton);
					document.getElementById('crop-button').addEventListener('click', handleCropButton);
				};
				reader.readAsDataURL(currentFile);
			}
		}

		function handleCropButton() {
			const croppedImageData = cropper.getCroppedCanvas().toDataURL();

			const byteString = atob(croppedImageData.split(',')[1]);
			const mimeString = croppedImageData.split(',')[0].split(':')[1].split(';')[0];
			const ab = new ArrayBuffer(byteString.length);
			const ia = new Uint8Array(ab);
			for (let i = 0; i < byteString.length; i++) {
				ia[i] = byteString.charCodeAt(i);
			}
			const blob = new Blob([ab], { type: mimeString });

			const file = new File([blob], currentFile.name, { type: mimeString, lastModified: Date.now() });

			accumulatedFiles.push(file);

			const newImageBox = document.createElement('div');
			newImageBox.classList.add('image-box');
			newImageBox.innerHTML = `<img src="${croppedImageData}" alt="Cropped Image"/>
												 <button type="button" class="remove-image" onclick="removeImage(event, '${file.name}')">&times;</button>`;
			const container = document.getElementById('image-upload-container');
			container.insertBefore(newImageBox, document.getElementById('add-image-box'));

			$('#crop-modal').modal('hide');
		}

		function removeImage(event, fileName) {
			const imageBox = event.target.parentElement;
			imageBox.remove();

			accumulatedFiles = accumulatedFiles.filter(file => file.name !== fileName);
		}

		document.getElementById('product-form').addEventListener('submit', function (event) {
			// Safely get the user ID from the session
			var userID = @userID;
			if (!userID) {
				// The user is not logged in, prevent form submission and show the login modal
				event.preventDefault();
				showLoginModalAndSubmitForm();
				return;
			}

			event.preventDefault();

			// Get the form values
			var productName = document.getElementById('product-name').value;
			var productCategory = document.getElementById('product-category').value;
			var productDescription = document.getElementById('product-description').value;
			var productPrice = document.getElementById('product-price').value;
			var productQuantity = document.getElementById('product-quantity').value;

			// Validate the form values
			if (productName.length === 0 || productCategory.length === 0 || productDescription.length === 0 || productPrice.length === 0 || productQuantity.length === 0) {
				alert('Fields cannot be blank.');
				return;
			}
			if (productName.length > 50) {
				alert('Product name cannot be longer than 50 characters.');
				return;
			}
			if (productDescription.length > 1500) {
				alert('Product description cannot be longer than 1500 characters.');
				return;
			}
			if (isNaN(productPrice) || productPrice < 0 || productPrice > 99999999.99) {
				alert('Product price must be a positive number and cannot be larger than 99999999.99.');
				return;
			}
			if (!Number.isInteger(Number(productQuantity)) || productQuantity < 0) {
				alert('Product quantity must be a positive integer.');
				return;
			}

			// If the input is valid, continue with the form submission
			const formData = new FormData(this);
			accumulatedFiles.forEach((file) => {
				formData.append('ProductImagesModel.ProductImages', file);
			});

			fetch(this.action, {
				method: 'POST',
				body: formData,
			})
				.then(response => {
					if (response.ok) {
						window.location.href = '/Products/MyWork';
					} else {
						console.error('Server responded with an error status');
					}
				})
				.catch((error) => {
					console.error('Error:', error);
				});
		});
	</script>
</body>