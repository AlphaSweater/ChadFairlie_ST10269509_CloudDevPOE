@model CloudDevPOE.Models.Tbl_Products
@{
	ViewData["Title"] = "Add Product";
}
<head>
	<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet">
	<style>
		:root {
			--item-size: 104px;
			--items-per-row: 3;
			--margin: 2px;
			--container-padding: 5px;
			--total-margin: calc(var(--margin) * 2);
			--container-width: calc((var(--item-size) + var(--total-margin)) * var(--items-per-row) + (var(--container-padding) * 2));
		}

		#crop-modal .modal-dialog {
			max-width: 90vw;
			max-height: 90vh;
		}

		#crop-modal .modal-body {
			display: flex;
			justify-content: center;
			align-items: center;
			height: 70vh;
		}

		#crop-image {
			max-width: 100%;
			max-height: 100%;
			width: auto;
			height: auto;
		}

		.form-container {
			display: flex;
			flex-direction: column;
		}

		.image-upload-container {
			display: flex;
			flex-wrap: wrap;
			padding: var(--container-padding);
			width: var(--container-width);
		}

		.image-box, .upload-box {
			width: var(--item-size);
			height: var(--item-size);
			margin: var(--margin);
			display: flex;
			justify-content: center;
			align-items: center;
			border: 1px solid #ccc;
			cursor: pointer;
		}

			.image-box img {
				max-width: 100%;
				max-height: 100%;
			}
	</style>
</head>

<body>
	<h1>Add Product</h1>
	<p>Please fill in the details of the product you want to add.</p>

	<form id="product-form" action="AddProduct" method="post" enctype="multipart/form-data">
		<div class="form-container">
			<input type="text" id="product-name" name="ProductName" placeholder="Product Name" required>
			<input type="text" id="product-category" name="ProductCategory" placeholder="Product Category" required>
			<textarea id="product-description" name="ProductDescription" placeholder="Product Description" required></textarea>
			<input type="number" id="product-price" name="ProductPrice" placeholder="Product Price" required>
			<input type="number" id="product-quantity" name="ProductQuantity" placeholder="Product Quantity" required>

			<div id="image-upload-container" class="image-upload-container">
				<input type="file" id="image-upload-input" class="image-upload-input" accept="image/*" style="display:none;" onchange="handleImageUpload(event)" />
				<div id="add-image-box" class="upload-box" onclick="document.getElementById('image-upload-input').click();">+</div>
			</div>

			<button type="submit">Submit</button>
		</div>
	</form>

	<!-- Image cropping modal -->
	<div class="modal fade" id="crop-modal" tabindex="-1" role="dialog" aria-labelledby="cropModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-lg">
			<div class="modal-content">
				<div class="modal-header">
					<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
					<h4 class="modal-title" id="cropModalLabel">Edit Photo</h4>
				</div>
				<div class="modal-body">
					<img id="crop-image" src="" alt="Image for cropping" />
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
					<button type="button" id="crop-button" class="btn btn-primary">Crop</button>
				</div>
			</div>
		</div>
	</div>

	@section Scripts {
		<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
		<script>
			let accumulatedFiles = [];
			let cropper = null;
			let currentFile = null;

			function handleImageUpload(event) {
				const files = event.target.files;
				if (files.length > 0) {
					currentFile = files[0];
					const reader = new FileReader();
					reader.onload = function (e) {
						const image = document.getElementById('crop-image');
						image.src = e.target.result;
						$('#crop-modal').modal('show');

						if (cropper !== null) {
							cropper.destroy();
						}

						setTimeout(() => {
							cropper = new Cropper(image, {
								aspectRatio: 16 / 9,
								viewMode: 2,
								dragMode: 'move',
								autoCropArea: 1,
								cropBoxResizable: false,
								zoomable: true,
							});
						}, 200);

						document.getElementById('crop-button').removeEventListener('click', handleCropButton);
						document.getElementById('crop-button').addEventListener('click', handleCropButton);
					};
					reader.readAsDataURL(currentFile);
				}
			}

			function handleCropButton() {
				const croppedImageData = cropper.getCroppedCanvas().toDataURL();

				const byteString = atob(croppedImageData.split(',')[1]);
				const mimeString = croppedImageData.split(',')[0].split(':')[1].split(';')[0];
				const ab = new ArrayBuffer(byteString.length);
				const ia = new Uint8Array(ab);
				for (let i = 0; i < byteString.length; i++) {
					ia[i] = byteString.charCodeAt(i);
				}
				const blob = new Blob([ab], { type: mimeString });

				const file = new File([blob], currentFile.name, { type: mimeString, lastModified: Date.now() });

				accumulatedFiles.push(file);

				const newImageBox = document.createElement('div');
				newImageBox.classList.add('image-box');
				newImageBox.innerHTML = `<img src="${croppedImageData}" alt="Cropped Image"/>`;
				const container = document.getElementById('image-upload-container');
				container.insertBefore(newImageBox, document.getElementById('add-image-box'));

				$('#crop-modal').modal('hide');
			}

			document.getElementById('product-form').addEventListener('submit', function (event) {
				event.preventDefault();

				const formData = new FormData(this);
				accumulatedFiles.forEach((file) => {
					formData.append('ProductImagesModel.ProductImages', file);
				});

				fetch(this.action, {
					method: 'POST',
					body: formData,
				})
					.then(response => {
						if (response.ok) {
							window.location.href = '/Products/MyWork';
						} else {
							console.error('Server responded with an error status');
						}
					})
					.catch((error) => {
						console.error('Error:', error);
					});
			});
		</script>
	}
</body>
