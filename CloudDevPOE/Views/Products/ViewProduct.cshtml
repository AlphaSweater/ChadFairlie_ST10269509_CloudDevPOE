@model CloudDevPOE.ViewModels.ProductDetailsViewModel
@{
	ViewData["Title"] = Model.ProductName;
	var imageUrlsJson = System.Text.Json.JsonSerializer.Serialize(Model.ImageUrls);
}

<head>
	<link rel="stylesheet" href="~/css/AddToCartButton.css">

	<style>
		.product-page {
			display: flex;
			flex-direction: column;
			padding: 20px;
			font-family: 'Arial', sans-serif;
			--accent-color: var(@Model.HighlightColor);
			--dark-color: #333;
			--light-color: #f9f9f9;
		}

		.product-details {
			display: flex;
			justify-content: space-between;
			gap: 5vw;
		}

		.product-carousel-container {
			display: flex;
			gap: 15px;
			align-items: center;
		}

		.product-thumbnails {
			display: flex;
			flex-direction: column;
			gap: 10px;
		}

			.product-thumbnails img {
				width: 80px;
				height: auto;
				object-fit: cover;
				border: 2px solid transparent;
				cursor: pointer;
				border-radius: 5px;
				transition: border-color 0.3s ease;
			}

				.product-thumbnails img.active {
					border-color: var(--accent-color);
				}

		.main-image {
			width: 500px;
			height: auto;
			object-fit: cover;
			border-radius: 10px;
		}

		.carousel-controls {
			display: flex;
			justify-content: space-between;
			width: 520px;
			margin-top: 10px;
		}

		.carousel-control {
			width: 40px;
			height: 40px;
			background-color: var(--accent-color);
			border-radius: 50%;
			border: none;
			display: flex;
			align-items: center;
			justify-content: center;
			opacity: 0.8;
			cursor: pointer;
			color: rgba(255, 255, 255, 0.8);
			transition: opacity 0.3s ease;
		}

			.carousel-control:hover {
				opacity: 1;
			}	

		.product-info {
			flex: 0 0 35%;
			display: flex;
			flex-direction: column;
			gap: 20px;
			background-color: var(--light-color);
			padding: 20px;
			border-radius: 10px;
			box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
		}

			.product-info h1 {
				margin: 0;
				font-size: 32px;
				color: var(--dark-color);
				border-bottom: 2px solid var(--accent-color);
				padding-bottom: 10px;
			}

			.product-info p, .attribute {
				margin: 0;
				font-size: 18px;
				line-height: 1.5;
				color: var(--dark-color);
			}

				.product-info p strong, .attribute {
					color: var(--accent-color);
				}

		.quantity-spinner {
			display: flex;
			gap: 10px;
			align-items: center;
		}

			.quantity-spinner input {
				width: 60px;
				text-align: center;
				padding: 5px;
				font-size: 16px;
				border: 2px solid var(--accent-color);
				border-radius: 5px;
			}

		.btn-primary {
			background-color: var(--accent-color);
			border-color: var(--accent-color);
			color: #fff;
			padding: 10px 20px;
			font-size: 16px;
			border-radius: 5px;
			cursor: pointer;
			transition: background-color 0.3s ease, border-color 0.3s ease;
		}

			.btn-primary:hover {
				background-color: darken(var(--accent-color), 10%);
				border-color: darken(var(--accent-color), 10%);
			}

		.back-link {
			text-decoration: none;
			margin-bottom: 20px;
			color: var(--dark-color);
			font-weight: bold;
		}
	</style>
</head>



<main class="product-page">
	<a href="@Url.Action("MyWork", "Products")" class="back-link">← Back to Products Page</a>

	<div class="product-details">
		<div class="product-carousel-container">
			<div class="product-thumbnails">
				@for (var i = 0; i < Model.ImageUrls.Count; i++)
				{
					<img src="@Model.ImageUrls[i]" class="@(i == 0 ? "active" : "")" alt="Thumbnail" onclick="changeMainImage(this)">
				}
			</div>
			<div>
				<button class="carousel-control" id="prev-image" onclick="prevImage()">&#9664;</button>
			</div>
			<div class="main-image-container">
				<img id="main-image" src="@Model.ImageUrls[0]" class="main-image" alt="Product Image">
			</div>
			<div>
				<button class="carousel-control" id="next-image" onclick="nextImage()">&#9654;</button>
			</div>
		</div>

		<div class="product-info">
			<h1>@Model.ProductName</h1>
			<p class="attribute"><strong>Seller Name:</strong> @Model.UserID</p>
			<p class="attribute"><strong>Category:</strong> @Model.ProductCategory</p>
			<p class="attribute"><strong>Description:</strong> @Model.ProductDescription</p>
			<p class="attribute"><strong>Price:</strong> @Model.ProductPrice.ToString("C", new System.Globalization.CultureInfo("en-ZA"))</p>
			<p class="attribute"><strong>Stock Available:</strong> @Model.AvailableQuantity</p>

			<div class="quantity-spinner">
				<label class="attribute" for="quantity"><strong>Quantity:</strong></label>
				<input type="number" id="quantity" name="quantity" min="1" max="@Model.AvailableQuantity" value="1">
			</div>

			<button type="button" class="button btn-primary">
				<span class="button__text">Add Item To Cart</span>
				<span class="button__icon">
					<svg xmlns="http://www.w3.org/2000/svg" width="24" viewBox="0 0 24 24" stroke-width="2" stroke-linejoin="round" stroke-linecap="round" stroke="currentColor" height="24" fill="none" class="svg">
						<line y2="19" y1="5" x2="12" x1="12"></line>
						<line y2="12" y1="12" x2="19" x1="5"></line>
					</svg>
				</span>
			</button>
		</div>
	</div>
</main>



@section Scripts {
	<script>
		var imageUrlsJson = '@Html.Raw(imageUrlsJson)';
		var images = JSON.parse(imageUrlsJson);
		let currentIndex = 0;

		function changeMainImage(img) {
			var index = Array.from(document.querySelectorAll('.product-thumbnails img')).indexOf(img);
			currentIndex = index;
			document.getElementById('main-image').src = images[index];
			document.querySelectorAll('.product-thumbnails img').forEach((img, i) => {
				img.classList.toggle('active', i === index);
			});
		}

		function prevImage() {
			currentIndex = (currentIndex - 1 + images.length) % images.length;
			changeMainImage(document.querySelectorAll('.product-thumbnails img')[currentIndex]);
		}

		function nextImage() {
			currentIndex = (currentIndex + 1) % images.length;
			changeMainImage(document.querySelectorAll('.product-thumbnails img')[currentIndex]);
		}

		document.querySelectorAll('.product-thumbnails img').forEach((img) => {
			img.addEventListener('click', () => changeMainImage(img));
		});
	</script>
}
